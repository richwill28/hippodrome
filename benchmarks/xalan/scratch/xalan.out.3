<!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="binding"></a>1 Binding</h2> <div class="div2">
<h3><a name="binding-intro"></a>1.1 Introduction</h3> 
<p><a title="" href="#">Binding</a> is the glue that connects the 
  separate pieces of XForms--the <a title="" href="#">XForms Model</a>,
  <a title="" href="#">instance data</a>, and <a title="" href="#">form control</a>s.
  The binding is independent of the user interface language used.</p>
<p>Binding is specified through the use of 
  <a title="" href="#">binding expression</a>s. The syntax 
  and details of binding expressions are defined in the chapter <a href="#"><b>???</b></a>. 
  This chapter describes the wider topic of how binding expressions are used within XForms.</p>
<p>A future revision of this chapter will address binding 
  across XForms Models, for instance declaring an "address" in one XForms Model
  and referencing it from another.</p>

</div>

<div class="div2">
<h3><a name="binding-attributes"></a>1.2 Binding Attributes</h3>
<p>XForms defines an attribute <code>ref</code> that can be placed on any form 
  control. Note that when placed on form 
  controls outside of XForms, it must be appropriately namespace-qualified. The value 
  of the attribute is a binding expression, 
  based on <a href="#"><b>???</b></a>, that links the form control
  to a particular location in the instance data (and therefore a particular model 
  item). For example:</p>

  <div class="example">
<h5>Example: XForms User Interface Markup with Binding Attributes</h5>
  <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="binding-expression"&gt;
   &lt;xform:caption&gt;Your first name&lt;/xform:caption&gt;
&lt;/xform:textbox&gt;</pre></td></tr></table>

<p>The <code>ref</code> attribute links the form 
        control to the instance data and XForms Model declared elsewhere 
        in the <a title="" href="#">containing document</a>.</p></div>
        
<p>This can also be used on non-XForms form controls, for instance XHTML:</p>

<div class="example">
<h5>Example: XHTML with Binding Attributes</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;html:input type="text" name="..." xform:ref="binding-expression"/&gt;</pre></td></tr></table>
<p> Here the <code>ref</code> attribute links an XHTML form 
    control to the instance data and XForms Model contained elsewhere 
    in the containing document. Note that the <code>html:</code> prefix is 
    used here to represent the XHTML namespace.</p></div>

<p>Details on the operation of binding expressions are given throughout the rest of this chapter.</p>
</div>

<div class="div2">
<h3><a name="binding-direct"></a>1.3 Direct Binding</h3>
<p>When a containing document has only a single XForms 
  Model and only a single set of instance data, binding is simpler because there 
  is no possibility of ambiguity as to which XForms 
  Model and instance data will participate. The following syntax can be used for the
  binding expression:</p>
<ul>
  <li><p>A binding expression that evaluates to a node-set in the instance 
    data. If the node-set contains more than one node, only the first node is used. If the
    node-set contains zero nodes, the binding expression is invalid.</p></li>
</ul>
<p>For example:</p>

<div class="example">
<h5>Example: Binding Expression</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="orderForm/shipTo/firstName"&gt;
...</pre></td></tr></table>
<p>Here the <code>ref</code> attribute specifies a path through the instance data to the desired location.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;orderForm&gt;
  &lt;shipTo&gt;
    &lt;firstName&gt;value&lt;/firstName&gt;
  &lt;/shipTo&gt;
&lt;/orderForm&gt;</pre></td></tr></table>
<p>Here is the matching instance data for the above example.</p></div>

<p>A special case applies when binding to 
  an element in the instance data that 
  contains an attribute of type <code>xsd:ID</code>. In this case, an XPath function 
  <code>id()</code>, can be used:</p>

<div class="example">
<h5>Example: Binding Expression with XPath id() Syntax</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="id('myfirstname')"&gt;
...</pre></td></tr></table>

<p>Here the <code>ref</code> attribute specifies a link to an instance 
          data element with an id of <code>myfirstname</code>.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;a&gt;
  &lt;b id="myfirstname"&gt;value&lt;/b&gt;
&lt;/a&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p></div>

<p>For this syntax to be valid, the following conditions must be true:</p>
<ul>
  <li><p>The instance data must be included 
    in the same document as the XForms User Interface</p></li>
  <li><p>Every referenced element in the instance 
    data must be marked with a valid ID (i.e. the ID is unique throughout 
    the whole document)</p></li>
  
</ul>
<p>Note also that:</p>
<ul>
  <li><p>this method is limited, because it requires exactly one instance, decorated 
    with ID attributes.</p></li>
  <li><p>It is still legal to have elements without ID attributes in the instance data.</p></li>
  <li><p>Only elements can be addressed</p></li>
</ul>
</div>

<div class="div2">
<h3><a name="binding-indirect"></a>1.4 Indirect Binding</h3>
<p>In situations where a form is designed by collaboration (such as between a 
  graphic designer and a database/XML specialist) it is desirable to locate all 
  binding expressions in a single area in the containing document. XForms allows 
  the binding expression to appear 
  in a separate element <code>bind</code>, a child of the <code>xform</code> element.</p>
<p>The attributes of <code>bind</code> are <code>id</code> of type <code>xsd:ID</code> 
  and <code>ref</code> which takes a binding expression. When a binding expression
  is defined this way, the form control 
  can reference the <code>id</code> of the <code>bind</code> element, 
  as seen here:</p>
  
<div class="example">
<h5>Example: Binding Expression Using Indirection</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox ref="id('myfirstname')"&gt;
...</pre></td></tr></table>
<p>Here the <code>ref</code> attribute specifies a link to a binding 
          expression defined elsewhere.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:bind id="myfirstname" ref="orderForm/shipTo/firstName"/&gt;
&lt;xform:instance&gt;
  &lt;orderForm&gt;
    &lt;shipTo&gt;
      &lt;firstName&gt;value&lt;/firstName&gt;
    &lt;/shipTo&gt;
  &lt;/orderForm&gt;
&lt;/xform:instance&gt;</pre></td></tr></table>
<p>Here is the instance data for the above example.</p></div>

<p>This accomplishes the following:</p>
<ul>
  <li><p>It is no longer necessary to add IDs to the instance.</p></li>
  <li><p>The binding mechanism is <em>independent</em>
    of the schema and user interface mechanisms.</p></li>
</ul>
</div>

<div class="div2">
<h3><a name="binding-multiple"></a>1.5 Multiple Forms per Page</h3>
<p>One design goal of XForms is to support multiple forms per page. This is accomplished 
  by having multiple <code>xform</code> elements within a containing document. 
  Each <code>xform</code> element might have a separate XForms Model or 
  instance data defined. This makes binding slightly more complex, because 
  the correct <code>xform</code> element needs to be referenced.</p>
<p>By default, binding expressions are based on the instance data
  associated with the first <code>xform</code> element in document 
  order. To refer to the contents of subsequent <code>xform</code> elements, 
  these must be decorated with <code>id</code> attributes of type <code>xsd:ID</code>. 
  Attached to the form control element, an additional attribute <code>xform</code> 
  serves to set the context node for the attached binding expression to the
  instance data or XForms Model associated with 
  the <code>xform</code> element with the matching <code>id</code>.</p>
<p>For example:</p>
<div class="example">
<h5>Example: Binding Expression Specifying Non-default <code>xform</code> Element</h5>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:textbox xform="b" ref="/orderForm/shipTo/firstName"&gt;
...</pre></td></tr></table>

<p>Here the <code>xform</code> and <code>ref</code> attributes specify 
          a binding to the instance data and XForms Model.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform id="b"&gt;
  &lt;xform:model&gt;
    ...
  &lt;/xform:model&gt;
  &lt;xform:instance&gt;
    &lt;orderForm xmlns="..."&gt;
      &lt;shipTo&gt;
        &lt;firstName&gt;value&lt;/firstName&gt;
      &lt;/shipTo&gt;
    &lt;/orderForm&gt;
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;</pre></td></tr></table></div>
<p>Scoped resolution of binding expressions, as defined in the chapter
  <a href="#"><b>???</b></a> can in some cases be used to avoid repetitive 
  uses of the <code>xform</code> attribute.</p>


  </div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="datatypes"></a>1 Datatypes</h2>

<div class="div2">
<h3><a name="datatypes-schema"></a>1.1 XML Schema Datatypes</h3><p>XForms includes all XML
  Schema <a title="" href="#">datatype</a>s, including the concepts of
  <a title="" href="#">value space</a> and
  <a title="" href="#">lexical space</a>, and all constraining
  <a title="" href="#">facet</a>s, as specified in <a href="#">[ref-xschema-2]</a>.
  For reference, these are</p>
  <p>Built-in primitive types:</p>
  <blockquote><p>
  duration
  <br>dateTime
  <br>time
  <br>date
  <br>gYearMonth
  <br>gYear
  <br>gMonthDay
  <br>gDay
  <br>gMonth
  <br>string
  <br>boolean
  <br>base64Binary
  <br>hexBinary
  <br>float
  <br>decimal
  <br>double
  <br>anyURI
  <br>QName
  <br>NOTATION
  </p></blockquote><p>Built-in derived types:</p>
  <blockquote><p>
  normalizedString
  <br>token
  <br>language
  <br>Name
  <br>NCName
  <br>ID
  <br>IDREF
  <br>IDREFS
  <br>ENTITY
  <br>ENTITIES
  <br>integer
  <br>nonPositiveInteger
  <br>negativeInteger
  <br>long
  <br>int
  <br>short
  <br>byte
  <br>nonNegativeInteger
  <br>unsignedLong
  <br>unsignedInt
  <br>unsignedShort
  <br>unsignedByte
  <br>positiveInteger
  </p></blockquote><p>The Schema for XForms derives new types for all the above datatypes, placing no
  additional restrictions on the allowed value space, but including them in the XForms namespace.</p>
  <div class="issue"><p class="prefix"><a name="datatype-identifiers"></a><b>Issue (datatype-identifiers):</b></p><p>One requirement is for XForms to include unique identifiers
  for each datatype listed here. We believe the facilities in XML Schema are sufficient for this,
  but welcome feedback  on this issue.</p></div>
  <div class="issue"><p class="prefix"><a name="ieee-datatypes"></a><b>Issue (ieee-datatypes):</b></p><p>There is concern that IEEE floating point, as used by the
  datatypes <code>xsd:float</code> and <code>xsd:double</code> may be difficult or impossible
  to implement on small devices. XPath (see <a href="#"><b>???</b></a>) also uses IEEE representation
  for numbers, and must be taken into consideration as to resolution of this conflict.</p></div>
  
  <div class="issue"><p class="prefix"><a name="xml-datatypes"></a><b>Issue (xml-datatypes):</b></p><p>Several datatypes, namely <code>xsd:QName</code>,
  <code>xsd:NOTATION</code>, <code>xsd:Name</code>, <code>xsd:NCName</code>, <code>xsd:ID</code>,
  <code>xsd:IDREF</code>, <code>xsd:IDREFS</code>, <code>xsd:ENTITY</code>, and
  <code>xsd:ENTITES</code> are highly specific to XML, and perhaps not as useful in XForms.
  Particularly on small devices, the incremental cost of supporting these datatypes might be
  excessive.</p></div>
  
  <div class="issue"><p class="prefix"><a name="pattern-facet"></a><b>Issue (pattern-facet):</b></p><p>Fully implementing the <code>pattern</code> facet might be too
  expensive on small devices.</p></div>
  
  <div class="issue"><p class="prefix"><a name="mask-facet"></a><b>Issue (mask-facet):</b></p><p>Previous Working Drafts of XForms specified a <code>mask</code>
  facet, with less implementation cost than the Schema <code>pattern</code> facet. What are
  our options for adding an entirely new facet not defined in XML Schema?</p>
  <p>The mask facet was defined as follows:</p>
  <div class="example">
<h5>Example: Mask Facet</h5><p>XML Schema has defined a Regular Expression language which
  is "similar to the regular expression language used in the Perl Programming language", 
  and can be applied to most built-in datatypes. Regular expression syntax, however, 
  is considered complex by some. Therefore, XForms defines the concept of a <code>mask</code> 
  facet. All <code>mask</code> facets 
  are convertible into <code>pattern</code>s.</p>
<p>XML schema 
  allows multiple <code>pattern</code> facets to be specified. Similarly, multiple 
  <code>mask</code> or <code>pattern</code> facets, but not a mixture, are permitted.</p>
<p>XForms <code>mask</code> uses the syntax and processing from <a href="#">[ref-wml1.3]</a> 
  <code>format</code>. Some examples:</p>
<ul>
  <li><p><code>A</code> matches "A", "X", "$", "%", 
    or "."</p></li>
  <li><p><code>a</code> matches "a", "x", "$", "%", 
    or "."</p></li>
  <li><p><code>X</code> matches "A", "X", "$", "%", 
    ".", or "4"</p></li>
  <li><p><code>x</code> matches "a", "x", "$", "%", 
    ".", or "4"</p></li>
  <li><p><code>N</code> matches "0", "4", or "7"</p></li>
  <li><p><code>3N</code> matches "0", "63", or "999" 
    but not "1234" (Note: only allowed at end of mask)</p></li>
  <li><p><code>*X</code> matches "$", "3.0", or "ABCDEFG" 
    (Note: only allowed at end of mask)</p></li>
  <li><p><code>\</code> causes the next literal character to be inserted into the 
    mask</p></li>
  <li><p><code>NNN\-NNNN</code> matches "123-4567" but not "1234567"</p></li>
</ul>
<p>As with WML <code>format</code> processing, an XForms Processor must ignore 
  invalid <code>mask</code>s.</p></div></div>
  
  <div class="issue"><p class="prefix"><a name="now-facet"></a><b>Issue (now-facet):</b></p><p>Previous Working Drafts of XForms specified "dynamic facets"
  that could be reevaluated at arbitrary times. One benefit of that approach was that a
  <code>now()</code> expression could be used as a constraining facet on date/time datatypes.
  What are our options for including similar functionality within the framework of XML Schema
  datatypes?</p></div></div>
  
  <div class="div2">
<h3><a name="datatypes-xforms"></a>1.2 XForms Datatypes</h3><p>The Schema for XForms derives the
  following types for use within forms:</p>
  
  <div class="div3">
<h4><a name="dt-currency"></a>1.2.1 currency</h4>
<p>The XForms datatype <code>currency</code> is derived from the XForms datatype 
  <code>xform:string</code>. A 